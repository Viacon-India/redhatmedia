@mixin defineColorHSL($color, $hue, $saturation, $lightness) {
  #{$color}: unquote("hsl(#{$hue}, #{$saturation}, #{$lightness})") !important;
  #{$color}-h: #{$hue};
  #{$color}-s: #{$saturation};
  #{$color}-l: #{$lightness};
}

// return css color variable with different opacity value
@function alpha($color, $opacity) {
  $color: str-replace($color, "var(");
  $color: str-replace($color, ")");
  $color-h: var(#{$color + "-h"});
  $color-s: var(#{$color + "-s"});
  $color-l: var(#{$color + "-l"});
  @return hsla($color-h, $color-s, $color-l, $opacity);
}

// replace substring with another string
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }
  @return $string;
}

@function lightness($color, $lightnessMultiplier) {
  $color: str-replace($color, "var(");
  $color: str-replace($color, ")");
  $color-h: var(#{$color + "-h"});
  $color-s: var(#{$color + "-s"});
  $color-l: var(#{$color + "-l"});
  @return hsl($color-h, $color-s, calc(#{$color-l} * #{$lightnessMultiplier}));
}

@mixin full-fit {
  height: 100%;
  width: 100%;
  object-fit: cover;

  @content;
}

// avoid using this
@mixin align-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);

  @content;
}

// avoid using this
@mixin align-center-auto {
  position: absolute;
  margin: auto;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;

  @content;
}

@mixin align-center-grid {
  display: grid;
  place-items: center;

  @content;
}

@mixin align-center-flex {
  display: flex;
  justify-content: center;
  align-items: center;

  @content;
}

@mixin grid-columns($min: 300px, $gap: 1rem, $columns: auto-fill) {
  display: grid;
  grid-template-columns: repeat($columns, minmax($min, 1fr));
  grid-gap: $gap;
  gap: $gap;

  @content;
}

@mixin size($w, $h: $w) {
  width: $w;
  @if $h {
    height: $h;
  } @else {
    height: $w;
  }
}

@mixin clamp($property, $min, $val, $max, $isImportant: "") {
  min-#{$property}: $min #{$isImportant};
  #{$property}: $val #{$isImportant};
  max-#{$property}: $max #{$isImportant};
  #{$property}: clamp($min, $val, $max) #{$isImportant};
}

@mixin line-clamp($lines: 1, $orientation: vertical, $isImportant: "") {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: $orientation;
  overflow: hidden;
}

@mixin size($size) {
  width: $size;
  height: $size;
}

@mixin underline-animation(
  $width: 100%,
  $position: relative,
  $underline-color: var(--primary),
  $time: 0.3s
) {
  position: $position;

  &:after {
    content: "";
    background: var(--primary);
    width: 0;
    height: 2px;
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    transition: 0.1s;
  }

  &:hover {
    &:after {
      width: $width;
      transition: $time;
      background-color: $underline-color;
    }
  }
}

@mixin custom-bullet($bullet: "+") {
  position: relative;
  list-style: none;
  margin-left: 0;
  padding-left: 1.2em;

  li:before {
    content: $bullet;
    position: absolute;
    left: 0;
    @content;
  }
}

@mixin color-bullet($color: var(--primary), $size: calc(4px + 0.5vmin)) {
  @include custom-bullet("") {
    width: $size;
    height: $size;
    background-color: $color;
    display: inline-block;
    border-radius: 50%;
    margin-right: 10px;
    margin-top: 0.5rem;
    @content;
  }
}

@mixin text-formal {
  @content;

  p {
    font-size: calc(10px + 1.1vmin);
    color: #5e5e5e;
    margin-bottom: 1rem;
    line-height: 2;

    img {
      margin-bottom: 0px;
    }
  }

  img {
    max-height: 60vh;
    max-width: 100%;
    object-fit: contain;
    height: auto;
    margin-bottom: 2vmin;
    // @include mq($from: tablet) {
    //   object-fit: cover;
    // }
  }

  h {
    &1 {
      margin-top: 3vmin;
      font-size: calc(13px + 2.1vmin);
    }

    &2 {
      margin-top: 2.9vmin;
      font-size: calc(11px + 2vmin);
    }

    &3 {
      margin-top: 2.8vmin;
      font-size: calc(9px + 2vmin);
    }

    &4 {
      margin-top: 2.4vmin;
      font-size: calc(7px + 2vmin);
    }

    &5 {
      margin-top: 2vmin;
      font-size: calc(5px + 2vmin);
    }

    &6 {
      margin-top: 1.6min;
      font-size: calc(3px + 2vmin);
    }
  }

  .title {
    font-weight: bold;
    margin-bottom: 1vmin;
  }

  ul {
    li {
      font-size: calc(10px + 1.1vmin);
      color: #5e5e5e;
      margin-bottom: 1rem;
      line-height: 2;
      margin-bottom: 1vmin;
    }
  }
  ol {
    li {
      font-size: calc(10px + 1.1vmin);
      color: #5e5e5e;
      margin-bottom: 1rem;
      line-height: 2;
      margin-bottom: 1vmin;
    }
  }

  *:not(.post-tags) a {
    text-decoration: underline;

    // @include underline-animation();

    &:hover {
      color: var(--primary);
      text-decoration: none;
    }
  }
}


$color-shadow: rgba(0, 0, 0, 0.2);
$color-shadow-light: rgba(61, 83, 255, 0.1);

$shadow-primary-config: 0 5px 2vmin -5px;
$shadow-secondary-config: 0 7px 5vmin -7px;
$shadow-primary: $shadow-primary-config $color-shadow;
$shadow-primary-light: $shadow-primary-config $color-shadow-light;
$shadow-secondary: $shadow-secondary-config $color-shadow;
$shadow-secondary-light: $shadow-secondary-config $color-shadow-light;

@mixin box-shadow-primary($color: $color-shadow) {
  box-shadow: $shadow-primary-config $color;
}

@mixin box-shadow-secondary($color: $color-shadow) {
  box-shadow: $shadow-secondary-config $color;
}

@mixin text-shadow-primary($color: $color-shadow) {
  text-shadow: 0 1px 3vmin $color;
}

@mixin text-shadow-secondary($color: $color-shadow) {
  text-shadow: 0 1px 3vmin $color;
}
